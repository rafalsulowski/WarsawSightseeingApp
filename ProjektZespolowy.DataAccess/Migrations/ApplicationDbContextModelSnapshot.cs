// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjektZespolowy.DataAccess.Data;

#nullable disable

namespace ProjektZespolowy.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjektZespolowy.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.CommentPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Note")
                        .HasColumnType("float");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentPlace");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.CommentLikes", b =>
                {
                    b.Property<int>("CommentLikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserLikeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("CommentLikeId", "UserLikeId");

                    b.HasIndex("UserLikeId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.CommentPlaceLikes", b =>
                {
                    b.Property<int>("CommentPlaceLikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserLikeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("CommentPlaceLikeId", "UserLikeId");

                    b.HasIndex("UserLikeId");

                    b.ToTable("CommentPlaceLikes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.PlaceLikes", b =>
                {
                    b.Property<int>("PlaceLikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserLikeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("PlaceLikeId", "UserLikeId");

                    b.HasIndex("UserLikeId");

                    b.ToTable("PlaceLikes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.PlacesTrips", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("PlacesTrips");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.PostLikes", b =>
                {
                    b.Property<int>("PostLikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserLikeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("PostLikeId", "UserLikeId");

                    b.HasIndex("UserLikeId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.TripLikes", b =>
                {
                    b.Property<int>("TripLikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserLikeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("TripLikeId", "UserLikeId");

                    b.HasIndex("UserLikeId");

                    b.ToTable("TripLikes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AverageTimeSpent")
                        .HasColumnType("int");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedCost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.PlaceAvailabilityTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClosingFriday")
                        .HasColumnType("int");

                    b.Property<int>("ClosingMonday")
                        .HasColumnType("int");

                    b.Property<int>("ClosingSaturday")
                        .HasColumnType("int");

                    b.Property<int>("ClosingSunday")
                        .HasColumnType("int");

                    b.Property<int>("ClosingThursday")
                        .HasColumnType("int");

                    b.Property<int>("ClosingTuesday")
                        .HasColumnType("int");

                    b.Property<int>("ClosingWednesday")
                        .HasColumnType("int");

                    b.Property<int>("OpeningFriday")
                        .HasColumnType("int");

                    b.Property<int>("OpeningMonday")
                        .HasColumnType("int");

                    b.Property<int>("OpeningSaturday")
                        .HasColumnType("int");

                    b.Property<int>("OpeningSunday")
                        .HasColumnType("int");

                    b.Property<int>("OpeningThursday")
                        .HasColumnType("int");

                    b.Property<int>("OpeningTuesday")
                        .HasColumnType("int");

                    b.Property<int>("OpeningWednesday")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("PlaceAvailabilityTimes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VotesAgainst")
                        .HasColumnType("int");

                    b.Property<int>("VotesFor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Budget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StopHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimesForPlaces")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Comment", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektZespolowy.Models.CommentPlace", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Place", null)
                        .WithMany("Comments")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.User", null)
                        .WithMany("CommentsPlace")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.CommentLikes", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.User", "User")
                        .WithMany("LikedComments")
                        .HasForeignKey("UserLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.CommentPlaceLikes", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.CommentPlace", "CommentPlace")
                        .WithMany("Likes")
                        .HasForeignKey("CommentPlaceLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.User", "User")
                        .WithMany("LikedCommentsPlace")
                        .HasForeignKey("UserLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommentPlace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.PlaceLikes", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Place", "Place")
                        .WithMany("Likes")
                        .HasForeignKey("PlaceLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.User", "User")
                        .WithMany("LikedPlaces")
                        .HasForeignKey("UserLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.PlacesTrips", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Place", "Place")
                        .WithMany("TripsThatIncludeThisPlace")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.Trip", "Trip")
                        .WithMany("Places")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.PostLikes", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.User", "User")
                        .WithMany("LikedPosts")
                        .HasForeignKey("UserLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.JoinedTables.TripLikes", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Trip", "Trip")
                        .WithMany("Likes")
                        .HasForeignKey("TripLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjektZespolowy.Models.User", "User")
                        .WithMany("LikedTrips")
                        .HasForeignKey("UserLikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Place", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.User", null)
                        .WithMany("Places")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektZespolowy.Models.PlaceAvailabilityTime", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.Place", null)
                        .WithOne("PlaceAvailabilityTime")
                        .HasForeignKey("ProjektZespolowy.Models.PlaceAvailabilityTime", "PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Post", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.User", null)
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Trip", b =>
                {
                    b.HasOne("ProjektZespolowy.Models.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.CommentPlace", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Place", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PlaceAvailabilityTime");

                    b.Navigation("TripsThatIncludeThisPlace");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.Trip", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("ProjektZespolowy.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CommentsPlace");

                    b.Navigation("LikedComments");

                    b.Navigation("LikedCommentsPlace");

                    b.Navigation("LikedPlaces");

                    b.Navigation("LikedPosts");

                    b.Navigation("LikedTrips");

                    b.Navigation("Places");

                    b.Navigation("Posts");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
